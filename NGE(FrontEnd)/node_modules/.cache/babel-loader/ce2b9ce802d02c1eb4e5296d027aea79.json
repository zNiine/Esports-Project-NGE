{"ast":null,"code":"'use strict';\n\nconst parseMilliseconds = require('parse-ms');\n\nconst pluralize = (word, count) => count === 1 ? word : word + 's';\n\nmodule.exports = (milliseconds, options = {}) => {\n  if (!Number.isFinite(milliseconds)) {\n    throw new TypeError('Expected a finite number');\n  }\n\n  if (options.colonNotation) {\n    options.compact = false;\n    options.formatSubMilliseconds = false;\n    options.separateMilliseconds = false;\n    options.verbose = false;\n  }\n\n  if (options.compact) {\n    options.secondsDecimalDigits = 0;\n    options.millisecondsDecimalDigits = 0;\n  }\n\n  const result = [];\n\n  const add = (value, long, short, valueString) => {\n    if ((result.length === 0 || !options.colonNotation) && value === 0 && !(options.colonNotation && short === 'm')) {\n      return;\n    }\n\n    valueString = (valueString || value || '0').toString();\n    let prefix;\n    let suffix;\n\n    if (options.colonNotation) {\n      prefix = result.length > 0 ? ':' : '';\n      suffix = '';\n      const wholeDigits = valueString.includes('.') ? valueString.split('.')[0].length : valueString.length;\n      const minLength = result.length > 0 ? 2 : 1;\n      valueString = '0'.repeat(Math.max(0, minLength - wholeDigits)) + valueString;\n    } else {\n      prefix = '';\n      suffix = options.verbose ? ' ' + pluralize(long, value) : short;\n    }\n\n    result.push(prefix + valueString + suffix);\n  };\n\n  const secondsDecimalDigits = typeof options.secondsDecimalDigits === 'number' ? options.secondsDecimalDigits : 1;\n\n  if (secondsDecimalDigits < 1) {\n    const difference = 1000 - milliseconds % 1000;\n\n    if (difference < 500) {\n      milliseconds += difference;\n    }\n  }\n\n  const parsed = parseMilliseconds(milliseconds);\n  add(Math.trunc(parsed.days / 365), 'year', 'y');\n  add(parsed.days % 365, 'day', 'd');\n  add(parsed.hours, 'hour', 'h');\n  add(parsed.minutes, 'minute', 'm');\n\n  if (options.separateMilliseconds || options.formatSubMilliseconds || milliseconds < 1000) {\n    add(parsed.seconds, 'second', 's');\n\n    if (options.formatSubMilliseconds) {\n      add(parsed.milliseconds, 'millisecond', 'ms');\n      add(parsed.microseconds, 'microsecond', 'Âµs');\n      add(parsed.nanoseconds, 'nanosecond', 'ns');\n    } else {\n      const millisecondsAndBelow = parsed.milliseconds + parsed.microseconds / 1000 + parsed.nanoseconds / 1e6;\n      const millisecondsDecimalDigits = typeof options.millisecondsDecimalDigits === 'number' ? options.millisecondsDecimalDigits : 0;\n      const millisecondsString = millisecondsDecimalDigits ? millisecondsAndBelow.toFixed(millisecondsDecimalDigits) : Math.ceil(millisecondsAndBelow);\n      add(parseFloat(millisecondsString, 10), 'millisecond', 'ms', millisecondsString);\n    }\n  } else {\n    const seconds = milliseconds / 1000 % 60;\n    const secondsDecimalDigits = typeof options.secondsDecimalDigits === 'number' ? options.secondsDecimalDigits : 1;\n    const secondsFixed = seconds.toFixed(secondsDecimalDigits);\n    const secondsString = options.keepDecimalsOnWholeSeconds ? secondsFixed : secondsFixed.replace(/\\.0+$/, '');\n    add(parseFloat(secondsString, 10), 'second', 's', secondsString);\n  }\n\n  if (result.length === 0) {\n    return '0' + (options.verbose ? ' milliseconds' : 'ms');\n  }\n\n  if (options.compact) {\n    return '~' + result[0];\n  }\n\n  if (typeof options.unitCount === 'number') {\n    return '~' + result.slice(0, Math.max(options.unitCount, 1)).join(' ');\n  }\n\n  return options.colonNotation ? result.join('') : result.join(' ');\n};","map":{"version":3,"sources":["/Users/zniine/nge/node_modules/pretty-ms/index.js"],"names":["parseMilliseconds","require","pluralize","word","count","module","exports","milliseconds","options","Number","isFinite","TypeError","colonNotation","compact","formatSubMilliseconds","separateMilliseconds","verbose","secondsDecimalDigits","millisecondsDecimalDigits","result","add","value","long","short","valueString","length","toString","prefix","suffix","wholeDigits","includes","split","minLength","repeat","Math","max","push","difference","parsed","trunc","days","hours","minutes","seconds","microseconds","nanoseconds","millisecondsAndBelow","millisecondsString","toFixed","ceil","parseFloat","secondsFixed","secondsString","keepDecimalsOnWholeSeconds","replace","unitCount","slice","join"],"mappings":"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","sourcesContent":["'use strict';\nconst parseMilliseconds = require('parse-ms');\n\nconst pluralize = (word, count) => count === 1 ? word : word + 's';\n\nmodule.exports = (milliseconds, options = {}) => {\n\tif (!Number.isFinite(milliseconds)) {\n\t\tthrow new TypeError('Expected a finite number');\n\t}\n\n\tif (options.colonNotation) {\n\t\toptions.compact = false;\n\t\toptions.formatSubMilliseconds = false;\n\t\toptions.separateMilliseconds = false;\n\t\toptions.verbose = false;\n\t}\n\n\tif (options.compact) {\n\t\toptions.secondsDecimalDigits = 0;\n\t\toptions.millisecondsDecimalDigits = 0;\n\t}\n\n\tconst result = [];\n\n\tconst add = (value, long, short, valueString) => {\n\t\tif ((result.length === 0 || !options.colonNotation) && value === 0 && !(options.colonNotation && short === 'm')) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalueString = (valueString || value || '0').toString();\n\t\tlet prefix;\n\t\tlet suffix;\n\t\tif (options.colonNotation) {\n\t\t\tprefix = result.length > 0 ? ':' : '';\n\t\t\tsuffix = '';\n\t\t\tconst wholeDigits = valueString.includes('.') ? valueString.split('.')[0].length : valueString.length;\n\t\t\tconst minLength = result.length > 0 ? 2 : 1;\n\t\t\tvalueString = '0'.repeat(Math.max(0, minLength - wholeDigits)) + valueString;\n\t\t} else {\n\t\t\tprefix = '';\n\t\t\tsuffix = options.verbose ? ' ' + pluralize(long, value) : short;\n\t\t}\n\n\t\tresult.push(prefix + valueString + suffix);\n\t};\n\n\tconst secondsDecimalDigits =\n\t\ttypeof options.secondsDecimalDigits === 'number' ?\n\t\t\toptions.secondsDecimalDigits :\n\t\t\t1;\n\n\tif (secondsDecimalDigits < 1) {\n\t\tconst difference = 1000 - (milliseconds % 1000);\n\t\tif (difference < 500) {\n\t\t\tmilliseconds += difference;\n\t\t}\n\t}\n\n\tconst parsed = parseMilliseconds(milliseconds);\n\n\tadd(Math.trunc(parsed.days / 365), 'year', 'y');\n\tadd(parsed.days % 365, 'day', 'd');\n\tadd(parsed.hours, 'hour', 'h');\n\tadd(parsed.minutes, 'minute', 'm');\n\n\tif (\n\t\toptions.separateMilliseconds ||\n\t\toptions.formatSubMilliseconds ||\n\t\tmilliseconds < 1000\n\t) {\n\t\tadd(parsed.seconds, 'second', 's');\n\t\tif (options.formatSubMilliseconds) {\n\t\t\tadd(parsed.milliseconds, 'millisecond', 'ms');\n\t\t\tadd(parsed.microseconds, 'microsecond', 'Âµs');\n\t\t\tadd(parsed.nanoseconds, 'nanosecond', 'ns');\n\t\t} else {\n\t\t\tconst millisecondsAndBelow =\n\t\t\t\tparsed.milliseconds +\n\t\t\t\t(parsed.microseconds / 1000) +\n\t\t\t\t(parsed.nanoseconds / 1e6);\n\n\t\t\tconst millisecondsDecimalDigits =\n\t\t\t\ttypeof options.millisecondsDecimalDigits === 'number' ?\n\t\t\t\t\toptions.millisecondsDecimalDigits :\n\t\t\t\t\t0;\n\n\t\t\tconst millisecondsString = millisecondsDecimalDigits ?\n\t\t\t\tmillisecondsAndBelow.toFixed(millisecondsDecimalDigits) :\n\t\t\t\tMath.ceil(millisecondsAndBelow);\n\n\t\t\tadd(\n\t\t\t\tparseFloat(millisecondsString, 10),\n\t\t\t\t'millisecond',\n\t\t\t\t'ms',\n\t\t\t\tmillisecondsString\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconst seconds = (milliseconds / 1000) % 60;\n\t\tconst secondsDecimalDigits =\n\t\t\ttypeof options.secondsDecimalDigits === 'number' ?\n\t\t\t\toptions.secondsDecimalDigits :\n\t\t\t\t1;\n\t\tconst secondsFixed = seconds.toFixed(secondsDecimalDigits);\n\t\tconst secondsString = options.keepDecimalsOnWholeSeconds ?\n\t\t\tsecondsFixed :\n\t\t\tsecondsFixed.replace(/\\.0+$/, '');\n\t\tadd(parseFloat(secondsString, 10), 'second', 's', secondsString);\n\t}\n\n\tif (result.length === 0) {\n\t\treturn '0' + (options.verbose ? ' milliseconds' : 'ms');\n\t}\n\n\tif (options.compact) {\n\t\treturn '~' + result[0];\n\t}\n\n\tif (typeof options.unitCount === 'number') {\n\t\treturn '~' + result.slice(0, Math.max(options.unitCount, 1)).join(' ');\n\t}\n\n\treturn options.colonNotation ? result.join('') : result.join(' ');\n};\n"]},"metadata":{},"sourceType":"script"}